// Base class Vehicle
class Vehicle {
    protected String make;
    protected String model;
    protected int year;

    public Vehicle(String make, String model, int year) {
        this.make = make;
        this.model = model;
        this.year = year;
    }

    public void start() {
        System.out.println(make + " " + model + " starting...");
    }

    public void stop() {
        System.out.println(make + " " + model + " stopping...");
    }
}

// Subclass Motorcycle
class Motorcycle extends Vehicle {
    private String engineSize;
    private boolean isSportsBike;

    public Motorcycle(String make, String model, int year, String engineSize, boolean isSportsBike) {
        super(make, model, year);
        this.engineSize = engineSize;
        this.isSportsBike = isSportsBike;
    }

    public void wheelie() {
        System.out.println(make + " " + model + " performing a wheelie!");
    }

    public void offRoad() {
        System.out.println(make + " " + model + " going off-road...");
    }
}

// Subclass Bus
class Bus extends Vehicle {
    private int seatingCapacity;
    private boolean isDoubleDecker;

    public Bus(String make, String model, int year, int seatingCapacity, boolean isDoubleDecker) {
        super(make, model, year);
        this.seatingCapacity = seatingCapacity;
        this.isDoubleDecker = isDoubleDecker;
    }

    public void openDoors() {
        System.out.println(make + " " + model + " opening doors...");
    }

    public void announceStops() {
        System.out.println(make + " " + model + " announcing stops...");
    }
}

// Subclass Trailer
class Trailer extends Vehicle {
    private int length;
    private boolean hasRamps;

    public Trailer(String make, String model, int year, int length, boolean hasRamps) {
        super(make, model, year);
        this.length = length;
        this.hasRamps = hasRamps;
    }

    public void attachToVehicle() {
        System.out.println(make + " " + model + " attached to a vehicle...");
    }

    public void loadCargo() {
        System.out.println(make + " " + model + " loading cargo...");
    }
}

// Subclass Boat
class Boat extends Vehicle {
    private int length;
    private boolean isMotorized;

    public Boat(String make, String model, int year, int length, boolean isMotorized) {
        super(make, model, year);
        this.length = length;
        this.isMotorized = isMotorized;
    }

    public void sail() {
        System.out.println(make + " " + model + " sailing...");
    }

    public void anchor() {
        System.out.println(make + " " + model + " dropping anchor...");
    }
}

// Main class to demonstrate usage
public class Main {
    public static void main(String[] args) {
        Motorcycle motorcycle = new Motorcycle("Honda", "CBR1000RR", 2022, "1000cc", true);
        motorcycle.start();
        motorcycle.wheelie();

        Bus bus = new Bus("Mercedes-Benz", "Sprinter", 2020, 20, false);
        bus.start();
        bus.openDoors();

        Trailer trailer = new Trailer("Utility", "Flatbed", 2019, 20, true);
        trailer.start();
        trailer.attachToVehicle();

        Boat boat = new Boat("Boston Whaler", "Montauk", 2018, 20, true);
        boat.start();
        boat.sail();
    }
}
